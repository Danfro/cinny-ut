# this file will build the app, create a downloadable artifact, publish the app to OpenStore and create a release with the build app as asset
name: build, publish and release

on:
  # start the script when a tag is pushed
  # format v1.2.3(.4)(addition) with values in brackets being optional
  # note: GitHub Actions does not support full regex in tag patterns; it uses simple glob patterns like *, ?, and [] instead.
  # https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet
  push:
    tags:
      - 'v*.*.**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  contents: write

# define the build job
jobs:
  build:
    strategy:
      matrix:
        appname: [cinny.danfro]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4 # here @latest doesn't work, specific version v4 or above
        with:
          submodules: 'true'
      - name: Extract NVM version from prebuild.sh
        id: extract-nvm-version
        run: echo "NVM_VERSION=$(grep -oP '(?<=NVM_VERSION=)[^ ]+' prebuild.sh)" >> $GITHUB_ENV
      - name: Extract node version from prebuild.sh
        id: extract-node-version
        run: echo "NODE_VERSION=$(grep -oP '(?<=NODE_VERSION=)[^ ]+' prebuild.sh)" >> $GITHUB_ENV
      - name: Set up Node.js environment
        run: |
          export NVM_DIR="$HOME/.nvm"
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v$NVM_VERSION/install.sh | bash
          . "$NVM_DIR/nvm.sh"  # Source nvm
          nvm install $NODE_VERSION
          nvm use $NODE_VERSION
          echo "Node.js $(node -v) installed via nvm"
      - name: Set Artifact Version
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          ARTIFACT_VERSION=${TAG_NAME#v}
          echo "ARTIFACT_VERSION=$ARTIFACT_VERSION" >> $GITHUB_ENV
          echo "Set ARTIFACT_VERSION=$ARTIFACT_VERSION"
      - name: Debug ARTIFACT_VERSION
        run: echo "ARTIFACT_VERSION=$ARTIFACT_VERSION"
        env:
          ARTIFACT_VERSION: ${{ env.ARTIFACT_VERSION }}
      - name: Install clickable
        run: |
          python3 -m pip install clickable-ut
      - name: Build
        # build the app with clickable for all specified architectures
        # then publish to OpenStore using the API key specified as Github secret with the last commit message as changelog
        env:
          OPENSTORE_API_KEY: ${{ secrets.OPENSTORE_API_KEY }}
        run: |
          clickable build --arch arm64
          echo "CHANGELOG=${{ github.event.head_commit.message }}" >> $GITHUB_ENV
          echo "changelog is: $CHANGELOG"
          clickable publish --arch arm64 -- "$CHANGELOG"
          clickable build --arch amd64
          clickable publish --arch amd64
          clickable build --arch armhf
          clickable publish --arch armhf
      - name: Upload artifacts
        # upload the build artifacts to github using the appname and version
        uses: actions/upload-artifact@v4 # https://github.com/actions/upload-artifact
        with:
          name: ${{ matrix.appname }}
          path: build/*/app/*.click
          if-no-files-found: error
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: softprops/action-gh-release@v2 # https://github.com/softprops/action-gh-release
        with:
          files: build/*/app/*.click
          body: ${{ github.event.head_commit.message }} # Grab the last commit message as changelog
          prerelease: false