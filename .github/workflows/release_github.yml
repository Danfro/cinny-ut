# this file will build the app, create a downloadable artifact, publish the app to OpenStore and create a release with the build app as asset

name: build and github release

on:
  # start the script when a tag is pushed ending with RC (no underline before RC, that will fail linting)
  # format v1.2.3(.4)RC with values in brackets being optional
  # note: GitHub Actions does not support full regex in tag patterns; it uses simple glob patterns like *, ?, and [] instead.
  push:
    tags:
      - 'v*.*.*.*RC'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  contents: write

# define the build job
jobs:
  build:
    strategy:
      matrix:
        arch: [amd64, arm64, armhf]
        appname: [cinny.danfro]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4 # here @latest doesn't work, specific version v4 or above
        with:
          submodules: 'true'
      - name: Extract NVM version from prebuild.sh
        id: extract-nvm-version
        run: echo "NVM_VERSION=$(grep -oP '(?<=NVM_VERSION=)[^ ]+' prebuild.sh)" >> $GITHUB_ENV
      - name: Extract node version from prebuild.sh
        id: extract-node-version
        run: echo "NODE_VERSION=$(grep -oP '(?<=NODE_VERSION=)[^ ]+' prebuild.sh)" >> $GITHUB_ENV
      - name: Set up Node.js environment
        run: |
          export NVM_DIR="$HOME/.nvm"
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v$NVM_VERSION/install.sh | bash
          . "$NVM_DIR/nvm.sh"  # Source nvm
          nvm install $NODE_VERSION
          nvm use $NODE_VERSION
          echo "Node.js $(node -v) installed via nvm"
      - name: Set Artifact Version
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          ARTIFACT_VERSION=${TAG_NAME#v}
          echo "ARTIFACT_VERSION=$ARTIFACT_VERSION" >> $GITHUB_ENV
          echo "Set ARTIFACT_VERSION=$ARTIFACT_VERSION"
      - name: Debug ARTIFACT_VERSION
        run: echo "ARTIFACT_VERSION=$ARTIFACT_VERSION"
        env:
          ARTIFACT_VERSION: ${{ env.ARTIFACT_VERSION }}
      - name: Install clickable
        run: |
          python3 -m pip install clickable-ut
      - name: Build
        # build the app with clickable for all specified architectures
        run: |
          clickable build --arch ${{ matrix.arch }}
      # - name: Upload artifacts
      #   # upload the build artifacts to github using the appname and version
      #   uses: actions/upload-artifact@v4 # here @latest doesn't work, specific version v4 or above
      #   with:
      #     name: ${{ matrix.appname }}_${{ matrix.arch }}
      #     path: .build/*/app/*.click
      #     if-no-files-found: error
  release:
      needs: build  # Waits for all build jobs to finish
      runs-on: ubuntu-latest
      steps:
      # - name: Upload Artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: ${{ matrix.architecture }}-build
      #     path: ./build/output
      # - name: Upload artifacts
      #   # upload the build artifacts to github using the appname and version
      #   uses: actions/upload-artifact@v4 # here @latest doesn't work, specific version v4 or above
      #   with:
      #     name: ${{ matrix.appname }}_${{ matrix.arch }}
      #     path: /home/runner/work/cinny-ut/cinny-ut/build/*/app/*.click
      #     if-no-files-found: error
      # - name: Check if release exists
      #   id: check_release
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
      #     if gh release view ${{ github.ref_name }} --repo ${{ github.repository }} > /dev/null 2>&1; then
      #       echo "exists=true" >> $GITHUB_ENV
      #     else
      #       echo "exists=false" >> $GITHUB_ENV
      #     fi
      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # if: env.exists == 'false' # Only proceed if release doesn't exist
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: ${{ github.event.head_commit.message }} # Grab the last commit message as changelog
          draft: false
          prerelease: true
      # - name: list File Paths
      #   run: ls -l .build/*/app/
      # - name: Upload All Click Files
      #   run: |
      #     for file in /home/runner/work/cinny-ut/cinny-ut/build/x86_64-linux-gnu/app/*.click; do
      #       echo "Uploading $file"
      #       gh release upload "${{ steps.create_release.outputs.tag_name }}" "$file"
      #     done
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload Release Asset
        run: |
          gh release upload "${{ steps.create_release.outputs.tag_name }}" \
          /home/runner/work/cinny-ut/cinny-ut/build/x86_64-linux-gnu/app/cinny.danfro_4.6.0.1RC_amd64.click
          gh release upload "${{ steps.create_release.outputs.tag_name }}" \
          /home/runner/work/cinny-ut/cinny-ut/build/aarch64-linux-gnu/app/cinny.danfro_4.6.0.1RC_arm64.click
          gh release upload "${{ steps.create_release.outputs.tag_name }}" \
          /home/runner/work/cinny-ut/cinny-ut/build/arm-linux-gnueabihf/app/cinny.danfro_4.6.0.1RC_armhf.click
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}




